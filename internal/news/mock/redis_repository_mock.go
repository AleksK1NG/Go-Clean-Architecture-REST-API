// Code generated by MockGen. DO NOT EDIT.
// Source: redis_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	models "github.com/AleksK1NG/api-mc/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRedisRepository is a mock of RedisRepository interface
type MockRedisRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRedisRepositoryMockRecorder
}

// MockRedisRepositoryMockRecorder is the mock recorder for MockRedisRepository
type MockRedisRepositoryMockRecorder struct {
	mock *MockRedisRepository
}

// NewMockRedisRepository creates a new mock instance
func NewMockRedisRepository(ctrl *gomock.Controller) *MockRedisRepository {
	mock := &MockRedisRepository{ctrl: ctrl}
	mock.recorder = &MockRedisRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRedisRepository) EXPECT() *MockRedisRepositoryMockRecorder {
	return m.recorder
}

// GetNewsByIDCtx mocks base method
func (m *MockRedisRepository) GetNewsByIDCtx(ctx context.Context, key string) (*models.NewsBase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewsByIDCtx", ctx, key)
	ret0, _ := ret[0].(*models.NewsBase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewsByIDCtx indicates an expected call of GetNewsByIDCtx
func (mr *MockRedisRepositoryMockRecorder) GetNewsByIDCtx(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewsByIDCtx", reflect.TypeOf((*MockRedisRepository)(nil).GetNewsByIDCtx), ctx, key)
}

// SetNewsCtx mocks base method
func (m *MockRedisRepository) SetNewsCtx(ctx context.Context, key string, seconds int, news *models.NewsBase) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNewsCtx", ctx, key, seconds, news)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNewsCtx indicates an expected call of SetNewsCtx
func (mr *MockRedisRepositoryMockRecorder) SetNewsCtx(ctx, key, seconds, news interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNewsCtx", reflect.TypeOf((*MockRedisRepository)(nil).SetNewsCtx), ctx, key, seconds, news)
}

// DeleteNewsCtx mocks base method
func (m *MockRedisRepository) DeleteNewsCtx(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNewsCtx", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNewsCtx indicates an expected call of DeleteNewsCtx
func (mr *MockRedisRepositoryMockRecorder) DeleteNewsCtx(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNewsCtx", reflect.TypeOf((*MockRedisRepository)(nil).DeleteNewsCtx), ctx, key)
}
