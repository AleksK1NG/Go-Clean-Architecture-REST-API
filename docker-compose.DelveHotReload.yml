version: "3.8"

services:
  web:
    container_name: api
    build:
      context: ./
      dockerfile: docker/Dockerfile.DelveHotReload
    ports:
      - "5000:5000"
      - "5555:5555"
      - "7070:7070"
      - "40000:40000"
    environment:
      - PORT=5000
    security_opt:
      - "seccomp:unconfined"
    cap_add:
      - SYS_PTRACE
    depends_on:
      - postgesql
      - redis
    restart: always
    volumes:
      - ./:/app
    networks:
      - web_api

  redis:
    image: redis:6-alpine
    container_name: api_redis
    ports:
      - "6379:6379"
    restart: always
    networks:
      - web_api

  postgesql:
    image: postgres:12-alpine
    container_name: api_postgesql
    ports:
      - "5432:5432"
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=auth_db
    volumes:
      - ./pgdata:/var/lib/postgresql/data
    networks:
      - web_api

  prometheus:
    container_name: prometheus_container
    image: prom/prometheus
    volumes:
      - ./docker/monitoring/prometheus-local.yml:/etc/prometheus/prometheus.yml:Z
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention=20d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - '9090:9090'
    networks:
      - web_api

  node_exporter:
    container_name: node_exporter_container
    image: prom/node-exporter
    ports:
      - '9101:9100'
    networks:
      - web_api

  grafana:
    container_name: grafana_container
    image: grafana/grafana
    ports:
      - '3000:3000'
    networks:
      - web_api


networks:
  web_api:
    driver: bridge